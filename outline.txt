3. Initialize a snake and render it
We have a board - now let’s add in a snake. The Snake class will be very simple - all it will be responsible for is keeping track of the snake’s position and direction. We’ll store positions as tuples (essentially the same as arrays) of x and y co-ordinates. A snake’s body will therefore be an array of tuples of the co-ordinates of its body segments:
[
  (2, 2),
  (2, 3),
  (3, 3),
  (4, 3)
  # …etc
]
We’ll store directions as tuples too. A direction tuple will give the change in co-ordinates that would be caused by taking a step in the direction. This is an example of a mathematical construct called a vector. For instance:
# Assume a standard co-ordinate grid where
# the bottom-left corner is (0, 0), and
# co-ordinates increase as you go up or
# right.
#
# If you take a step `up` then your x
# co-ordinate doesn't change, and your y
# co-ordinate increases by 1, therefore:
UP = (0, 1)

# Similarly:
DOWN = (0, -1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# Exercise for the reader - if snakes could
# move diagonally, what would the values
# of DIAGONALLY_UP_LEFT,
# DIAGONALLY_DOWN_RIGHT etc be?
Lets use these definitions to flesh out our Snake class:
1. Start by adding init_body and init_direction arguments to our Snake class’s constructor. Snakes need positions and directions as soon as they are born, and we have to tell them their initial place in the world at the time that we make them.
2. Add a take_step method that accepts a position argument. It should add this position to the front of the snake’s body, and pop off the back position. This will cause the snake to slither around the board, staying the same length.
3. Add a set_direction method that accepts a direction argument, and sets the argument as the snake’s direction
4. Add a head method that returns the position of the front of the snake’s body
SPOILER ALERT - I’ve sketched out some pseudo-code for our Snake class below.
# Pseudo-code:

class Snake {

  def initialize(init_body, init_direction) {
    self.body = init_body
    self.direction = init_direction
  }

  def take_step(position) {
    self.body = self.body[1:] + [position]
  }

  def set_direction(direction) {
    self.direction = direction
  }

  def head() {
    return self.body[-1]
  }
}
With the skeleton of our Snake complete (TODO: do snakes have skeletons?), initialize a Snake in the constructor for Game:
# Pseudo-code:

# Define directions as constants to make them easier
# to reference:
UP = (0, 1)
# etc...

class Game {

  def initialize(height, width) {
    self.height = height
    self.width = width
    # We could also pass the snake's initial
    # body and direction into the constructor
    # for `Game` to make it easier to
    # configure. For now let's hardcode them.
    self.snake = Snake([(0, 0), (1, 0), (2, 0), (3, 0)], UP)
  }

  # (Rest of our `Game` code from previous
  # sections goes here)
}
Finally, update Game’s render function so that it prints the snake in the board, using Os for the body and X for the head. Test a few different snake bodies by changing the hardcoded values in Game’s constructor, and make sure that they all print correctly.
+--------+
| X      |
| O      |
| OOO    |
|   O    |
+--------+
4. Let the player pilot their snake
The best games are those that the player gets to play at some point. Let’s allow our player to pilot their snake.
Since this is version 1, we’ll make a few simplifications and take a few shortcuts. In hi-tech versions of Snake, the snake is always moving. If the player presses a direction key then it changes direction, but if they don’t then it just keeps on moving in the same direction. It doesn’t wait around.
However, since we are using the terminal as our display, this type of continuous movements is harder to implement. Terminals usually only recognize new input when the user presses the Enter key, and until they do, they just sit there, waiting.
We’re therefore going to require that the player press Enter every time they want their snake to take a slither. We’ll map the letters W, S, A, and D to up, down, left, and right respectively. If the player presses W and then Enter, their snake will slink one square up. If they press S then Enter then it will slink one square down. And it they just hit Enter without pressing any other key, then it will slink one square in whichever direction it was traveling before. This won’t make for a fast-paced thrillfest, but it will make for an excellent prototype, and the player can get into a surprisingly satisfying rhythm of key-Enter-key-Enter anyway.
We’ll turn this into a constantly updating game display in the same way as we did in Game of Life. After every move, we’ll simply use our render function to print the new state of the board. This won’t replace the old state of the board in the terminal, but it will push it out of the field of view, which to the slow and unoptimized human eye will look like almost the same thing.
Give this a go. Accept input from the player and use it to move our snake around the board. Make sure you test your code rigorously. Verify you can slither right into every corner without causing an Array index out of bound! error. Think about what should happen if a snake is heading UP, and the player presses the key for DOWN. I personally like just ignoring their bamboozling command, but you might prefer to handle it differently.
If the player crashes into their own body, the laws of the universe say that they should die. But for now, allow the player to glide through themselves without coming to any harm. For a fleeting second, let the player be immortal.
Their time will come.
5. Work out when the player has died
That was quick.
In reality, if a snake bashes into its own body, the blunt force trauma kills it instantly. Update our game so that if the player crashes their snake into itself then their game is over. Print a message of condolence and exit the program.
In “Snake” for the Nokia 3210 phone, players were also killed if they bashed into a wall. In the sequel, “Snake 2” for the Nokia 3310, technology advances allowed them to wrap around to the other side of the world instead.
You can decide which rule you want to use. You could even give the player the option to choose.
6. Feed the snake
The goal of every snake is the same - to eat as many apples as possible before crashing into itself. Of course, the more apples a snake eats, the longer it gets, and the longer it gets, the more likely it is to crash into itself. There’s an allegory about the perils of greed in there somewhere.
At the beginning of our game, place an apple on the board in a random location. When the snake’s head runs over the apple and eats it, give the player a point. Remove the apple, place another one in a new location, and make the snake’s body 1 square longer.
Don’t try to do everything at once - whenever I do this I almost always end up achieving nothing. Break the task into smaller chunks, and make sure each chunk works before moving onto the next one. For example
• At the start of the game, generate an apple in a random location. Render it on the board
• When the player eats an apple, remove it and generate a new apple in a new random location
• When the player eats an apple, extend their body by 1 square
• When the player eats an apple, increment their score by 1
• When the player dies, tell them how many points they scored
Then we’re done.
7. Congratulations!
You now have a fully functional world. Snakes are born. They eat, they grow. If they put a single foot wrong then they die. And when they die, their achievements are weighed and evaluated, and they are judged. Congratulations!
Here are your 4 next steps:
